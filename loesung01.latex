\documentclass[
%% alle weiteren Papierformat einstellbar:
a4paper, %apaper,
%% keine Seitenzahlen:
%empty,
%% Schriftgröße (12pt, 11pt (Standard)):
11pt,
%% kleinere Überschriften:
smallheadings,
]
{scrartcl}

% _das_ Mathepaket schlechthin:
\usepackage[
  %% Nummerierung von Gleichungen links:
  leqno,
  %% Ausgabe von Gleichungen linksbündig:
  fleqn,
]{mathtools}
% und dazu noch ein paar Mathesymbole und so:
% (muss vor mathspec geladen werden)
\usepackage{amsmath, amssymb}

\usepackage[]{parskip}

% Um auch schöne Schriftarten auswählen zu können:
\usepackage[MnSymbol]{mathspec}

% Wir wollen, dass alle unsere Schriften für TeX und einander angepasst sind:
\defaultfontfeatures{Mapping=tex-text, Scale=MatchLowercase}
% Die Hauptschriftart:
\setmainfont[Numbers=OldStyle]{Minion Pro}
% Die Matheschriftart:
\setmathsfont(Digits,Latin,Greek)[
  Numbers={Lining, Proportional}
]{Minion Pro}
% Die Schriftart für serifenlose Texte (z.B. Überschriften):
\setallsansfonts[]{Myriad Pro}
% Und die Schriftart für nichtproportionale Texte:
\setallmonofonts[]{Fira Mono}

% Deutsche Sprache bei Silbentrennung und Datum:
\usepackage[ngerman]{babel}

% St. Mary Road, liefert Symbole für theoretische Informatik (z.B. \lightning):
\usepackage{stmaryrd}

% nutze die volle Seite als Satzspiegel:
\usepackage[
  % Randbreite sei 1cm (sonst ist sie 1in):
  cm,
  % Kopf- und Fußzeile werden miteinbezogen:
  headings
]{fullpage}
% verbesserte Tabellen
% bietet u.a. die Spaltenmöglichkeit 'm{width}' = zentrierte Spalte mit fester
% Breite
\usepackage{array}
% kann komplexe Linien in Tabellen ziehen:
%\usepackage{hhline}
% mehrseitige Tabellen:
%\usepackage{longtable}
% Tabellen mit gedehnten Spalten:
%\usepackage{tabularx}
% Pimpt enumerate auf (optionales Argument liefert Nummerierung):
\usepackage{enumerate}
% Kann descriptions auf die selbe Höhe bringen:
%\usepackage{enumitem}
% Liefert Hyperlinks (\hyperref, \url, \href}
\usepackage{hyperref}
% Farben (wie bei TikZ):
%\usepackage{xcolor}
% Ändert den Zeilenabstand:
\usepackage[
  % nur eine Möglichkeit auswählen:
  singlespacing
  %onehalfspacing
  %doublespacing
]{setspace}
% Schönere Tabellen
% dazu gibt's neue Kommandos:
% - \toprule[(Dicke)], \midrule[(Dicke)], \bottomrule[(Dicke)]
% - \addlinespace: Extrahöhe zwischen Zeilen
\usepackage{booktabs}
% Schöne numerische Zitierungen:
%\usepackage{cite}
% Verbessert den Satz von Abbildungsüberschriften:
%\usepackage{caption}
% Ermöglicht durch \begin{linenumbers} Zeilennummern anzuzeigen:
%\usepackage{lineno}
% Ermöglicht Zugriff auf die letzte Seite (z.B. \pageref{LastPage}):
\usepackage{lastpage}
% Quelltext schön setzen:
\usepackage{listings}
\lstset{%
  language=Haskell,
  basicstyle=\ttfamily,
}
% Logische Beweise:
%\usepackage{bussproofs}
% Unterstreichungen (\uline, \uuline, \sout: durchgestrichen, \uwave):
%\usepackage{ulem}
% Kann alle möglichen Maße ändern
% will man Querformat, dann:
%\usepackage[landscape]{geometry}
% bietet gestrichelte vert. Linien in Tabellen (':')
%\usepackage{arydshln}
% Quelltext schön setzen:
% (verlangt "xelatex -shell-escape"!)
%\usepackage{minted}
% um Bilder einzubinden:
%\usepackage{graphicx}
% um in Tabellen eine Zelle über mehrere Zeilen laufen zu lassen:
\usepackage{multirow}

% Coole Zeichnungen:
\usepackage{tikz}
%\tikzstyle{vertex}=[draw, circle, minimum size=20pt]
%\tikzstyle{edge}=[draw, -]
\usetikzlibrary{%
  %backgrounds,
  %mindmap,
  %shapes.geometric,
  %shapes.symbols,
  %shapes.misc,
  %shapes.multipart,
  positioning,
  %fit,
  %calc,
  %arrows,
  automata,
  %trees,
  %decorations.pathreplacing,
}

\usepackage{algorithmic}

\renewcommand{\algorithmicrequire}{\textbf{Eingabe:}}

% eigens gebaute Lochmarken:
%\usepackage{eso-pic}
%\AddToShipoutPicture*{
  %\put(\LenToUnit{0mm},\LenToUnit{228.5mm})
    %{\rule{\LenToUnit{20pt}}{\LenToUnit{0.5pt}}}
  %\put(\LenToUnit{0mm},\LenToUnit{68.5mm})
    %{\rule{\LenToUnit{20pt}}{\LenToUnit{0.5pt}}}
%}

% coole Kopf- und Fußzeilen:
\usepackage{fancyhdr}
% Seitenstil ist natürlich fancy:
\pagestyle{fancy}
% alle Felder löschen:
\fancyhf{}
% Veranstaltung:
\fancyhead[L]{Künstliche Intelligenz}
% Seriennummer:
\fancyhead[C]{Übungsblatt 1}
% Name und Matrikelnummer:
\fancyhead[R]{Martin Darmüntzel (7251955)}
%\fancyfoot[L]{}
%\fancyfoot[C]{\thepage}
\fancyfoot[C]{\thepage\,/\,\pageref{LastPage}}
% Linie oben/unten:
\renewcommand{\headrulewidth}{0.0pt}
\renewcommand{\footrulewidth}{0.0pt}

\newcommand{\N}{\mathbb{N}}
\renewcommand{\max}{\text{max}}

\begin{document}

\section{Einführung}
\label{sec:einfuhrung}

\begin{enumerate}
  \item Was verstehen Sie unter künstlicher Intelligenz?

  Künstliche Intelligenz ist ein Programm, das menschliche Intelligenz
    nachbilden und vor allem die Fähigkeit des Problemlösens beherrschen soll.
    Dazu muss es planen, suchen, optimieren und mit unsicherem Wissen umgehen
    können.
\end{enumerate}

\section{Der Turing-Test}
\label{sec:der_turing_test}

\begin{enumerate}
  \item Wie funktioniert der Turing-Test?

    Ein Mensch stellt über ein Terminal Fragen an einen anderen Menschen bzw.
    eine KI. Danach muss der Fragesteller entscheiden, ob es sich um eine
    Maschine oder einen Menschen handelte. Wenn die Maschine vom Menschen nicht
    eindeutig unterschieden werden kann, dann ist die Maschine laut Turing
    intelligent.

  \item Was braucht eine Maschine um den Test zu bestehen?

    Eine Maschine muss natürliche Sprache verstehen können und braucht eine
    Repräsentation von Allgemeinwissen (Weltwissen). Weiterhin muss sie
    (einfache) Probleme lösen und logisches Schließen beherrschen können.

  \item Was ist der totale Turing-Test?

    Beim totalen Turing-Test erfolgt die Kommunikation nicht über ein Terminal,
    sondern per Video.

  \item Was braucht eine Maschine um den totalen Turing-Test zu bestehen?

    Zusätzlich braucht eine Maschine ein „menschliches Antlitz“ und
    Sprachsynthese.

  \item Welche Probleme existieren beim Turing-Test?

    Die Zeit der Fragestellungen ist nicht spezifiziert: wie lange muss eine
    Maschine den Fragesteller überzeugen? Weiterhin ist nicht klar, was für
    einen Menschen die Maschine simulieren soll: welches Alter soll simuliert
    werden? Ein Kind oder einen Greis?

    Außerdem könnten manche Probleme (z.\,B. komplexe arithmetische
    Berechnungen) von einer KI sehr schnell gelöst werden, während sich ein
    Mensch daran schwer täte. Damit wäre eine KI einfach zu entlarven.
\end{enumerate}

\section{Agenten}
\label{sec:agenten}

\begin{enumerate}
  \item Was ist ein Agent? Aus welchen Bestandteilen besteht ein Agent?

    Ein Agent ist etwas, das handelt (lat. \textit{agere} = tun).

    Ein Agent besteht aus
    \begin{itemize}
      \item Sensoren, die die Umwelt des Agenten wahrnehmen,
      \item Effektoren, die die Umwelt oder den Agenten in der Umwelt
        beeinflussen, und
      \item einer Verarbeitungslogik, die aus den wahrgenommenen Signalen
        Aktionen bestimmt, welche der Agent ausführt.
    \end{itemize}
\end{enumerate}

\section{Haskell-Wiederholung}
\label{sec:haskell_wiederholung}

\begin{enumerate}
  \item Geben Sie die Definition einer Funktion \lstinline|isPrime n| an, die
    überprüft, ob \lstinline|n| eine Primzahl ist.

    \begin{lstlisting}[language=haskell]
      isPrime :: Int -> Bool
      isPrime n = (n > 1) && ([k | k <- [1..n], n `mod` k == 0] == [1, n])
    \end{lstlisting}

  \item Definieren Sie die Liste aller Primzahlen. Nutzen Sie dafür eine
    Listenkomprehension.

    \begin{lstlisting}[language=haskell]
      primes = [p | p <- [1..], isPrime p]
    \end{lstlisting}

  \item Geben Sie eine parametrisierte Datendeklaration an, um Binärbäume mit
    den folgenden Eigenschaften in Haskell darzustellen:
    \begin{itemize}
      \item Nur die Blätter des Baumes enthalten Daten.
      \item Alle Daten an den Blättern eines Baumes besitzen den selben Typ.
      \item Auch der leere Baum ist ein gültiger Binärbaum.
    \end{itemize}

    \begin{lstlisting}
data Tree a = Empty | Leaf a | Branch (Tree a) (Tree a) deriving Show
    \end{lstlisting}

    Geben Sie einen Beispielbaum als Haskell-Term an.
    \begin{lstlisting}
t = Branch (Leaf 2) (Branch (Branch (Leaf 13) (Leaf 23)) (Leaf 42))
    \end{lstlisting}

    Implementieren Sie die folgenden Funktionen:
    \begin{enumerate}
      \item \lstinline|sumLeaves| soll die Summe aller Werte in den Blattknoten
        eines numerischen Binärbaums entsprechend Ihrer Datendeklaration
        zurückgeben.

        \begin{lstlisting}
sumLeaves :: Num t => Tree t -> t
sumLeaves Empty = 0
sumLeaves (Leaf v) = v
sumLeaves (Branch left right) = sumLeaves left + sumLeaves right
        \end{lstlisting}

      \item \lstinline|mapLeaves| soll eine Funktion \lstinline|f :: a -> a| auf
        alle Blätter eines Binärbaums entsprechend Ihrer Datendeklaration
        anwenden und den resultierenden Baum zurückgeben.

        \begin{lstlisting}
mapLeaves :: (a -> a) -> Tree a -> Tree a
mapLeaves f Empty = Empty
mapLeaves f (Leaf v) = Leaf (f v)
mapLeaves f (Branch left right) = Branch (mapLeaves f left) (mapLeaves f right)
        \end{lstlisting}
    \end{enumerate}
\end{enumerate}


\end{document}
